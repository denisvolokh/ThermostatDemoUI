<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="creationCompleteHandler(event)"
		currentState="down">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("sg.denisvolokh.gwr.GWRThermostat")]
	</fx:Metadata>
	
	<fx:Declarations>
		<!--<s:AnimateColor id="animateBackgroundColor"
						target="{ backgroundSolid }"
						colorPropertyName="color"
						colorFrom="0x111111"
						colorTo="0x004dd8"
						duration="400"/>
		
		<mx:AnimateProperty id="animateAlpha" 
						    repeatCount="0"
							targets="{ [labelConfirmChanges, labelCurrentDegress] }"
							property="alpha"
							fromValue=".4"
							toValue="1"
							duration="800"/>-->
		
		<s:Animate id="filterAnimateGlowHighlight" 
						 target="{ filterGlowHighlight }" 
						 duration="700"
						 repeatCount="0"
						 repeatBehavior="reverse">
			<s:SimpleMotionPath property="alpha" 
								valueFrom=".9" 
								valueTo=".1"/>
		</s:Animate>
		
		<s:GlowFilter id="filterGlowHighlight" 
					  color="#FFFFFF" 
					  alpha=".9" 
					  blurX="12" 
					  blurY="12" 
					  strength="1" 
					  quality="2"/>
	</fx:Declarations>
	

	
	<s:states>
		<s:State name="normal" enterState="enterNormalStateHandler(event)"/>
		<s:State name="down"
				 stateGroups="pending"
				 exitState="exitDownStateHandler(event)"
				 enterState="enterDownStateHandler(event)"/>
		<s:State name="notConfirmed"
				 stateGroups="pending"
				 exitState="exitNotConfirmedStateHandler(event)"
				 enterState="notConfirmedEnterStateHandler(event)"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import ColorJizz.AbstractColor;
			import ColorJizz.RGB;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			
			import sg.denisvolokh.gwr.BarTick;
			
			import spark.filters.GlowFilter;
			import spark.primitives.Graphic;
			import spark.primitives.Path;
			
			import utils.Arc;
			import utils.CSections;
			import utils.Wedge;
			
			private var needToRepositionValueLabel : Boolean = false;
			
			private var minAngle : Number = 130;
			
			private var maxAngle : Number = 410;
			
			private var _tempPending : Number = 0;
			
			private var _tempCurrent : Number = 0;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				var start : RGB = new RGB(58,86,148)
				var range : Vector.<AbstractColor> = start.range(new RGB(156,68,46), 47, true);
				
				var j :int = 0;
				for (var i : int = minAngle; i <= maxAngle; i=i+7)
				{
					var small:BarTick = new BarTick();
					small.x = 125;
					small.y = 125;
					small.alpha = 1;
					trace(j,i,RGB(range[j]).toHex().hex)
					small.color = RGB(range[j]).toHex().hex;
					small.rotation = i;
					containerBackground.addElement(small);
					j++;
				}
				
				_tempCurrent = hostComponent.currentValue;
				labelCurrentDegress.text = (hostComponent.currentValue / 10).toFixed(1) + "째";
			}
			
			private function rotateMovingCursor(delta : Number):Number
			{
				var newValue : Number = _tempCurrent + delta*7;
				
				if (newValue >= maxAngle)
				{
					_tempCurrent = maxAngle;
				}
				else if (newValue <= minAngle)
				{
					_tempCurrent = minAngle;	
				}
				else
				{
					_tempCurrent = newValue;	
				}
				
				if (delta != 0) 
				{
					this.addHighlighedTicks(hostComponent.currentValue, _tempCurrent);
				}
				
				labelCurrentDegress.text = (_tempCurrent / 10).toFixed(1) + "째";
				hostComponent.pendingValue = _tempCurrent;
				
				return _tempCurrent;
			}
			
			private function addHighlighedTicks(from : int, to : int):void
			{
				clearHighlighedTicks();
				
				var _from : int = from;
				var _to : int = to;
				
				if (from >= to)
				{
					_from = to;
					_to = from;
				}
				
				for (var i : int = _from + 7; i < _to; i=i+7)
				{
					var small:BarTick = new BarTick;
					small.color = 0xFFFFFF;
					small.x = 100;
					small.y = 100;
					small.alpha = .7;
					small.rotation = i;
					this.highlighted.addElement(small);
				}
				
				var g : Graphics = highlighted.graphics;
				var arc : CSections = new CSections(87, 2, 100, 100, (_from - 2) * Math.PI / 180, (_to + 2) * Math.PI / 180);
				g.beginFill(0xC2B538, 0.9);
				arc.draw(g);
				g.endFill();
			}
			
			private function clearHighlighedTicks():void
			{
				this.highlighted.removeAllElements();
				highlighted.graphics.clear();
			}
			
			protected function enterDownStateHandler(event:FlexEvent):void
			{
				cursorPendingPosition.rotation = hostComponent.currentValue;
				filterAnimateGlowHighlight.play();
			}
			
			protected function enterNormalStateHandler(event:FlexEvent):void
			{
				labelCurrentDegress.text = (hostComponent.currentValue / 10).toFixed(1) + "째";
				
				cursorCurrentPosition.rotation = hostComponent.currentValue;
			}
			
			protected function exitDownStateHandler(event:FlexEvent):void
			{
			}
			
			protected function notConfirmedEnterStateHandler(event:FlexEvent):void
			{
				labelPrevValue.text = (hostComponent.currentValue / 10).toFixed(1) + "째";
			}
			
			protected function exitNotConfirmedStateHandler(event:FlexEvent):void
			{
				clearHighlighedTicks();
				filterAnimateGlowHighlight.stop();
			}
			
		]]>
	</fx:Script>
	<s:Group width="350" height="350">
		<s:Ellipse width="300" height="300"
				   horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:LinearGradient rotation="60">
					<s:GradientEntry color="#f4f4f4" ratio="0" />
					<s:GradientEntry color="#000000" ratio="1" />
				</s:LinearGradient>
			</s:fill>
		</s:Ellipse>
		<s:Ellipse width="270" height="270"
				   horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:LinearGradient rotation="60">
					<s:GradientEntry color="#000000" ratio="0" />
					<s:GradientEntry color="#777777" ratio="1" />
				</s:LinearGradient>
			</s:fill>
		</s:Ellipse>
	</s:Group>
	<s:Group id="containerBackground"
			 horizontalCenter="0" verticalCenter="0"
			 width="250" height="250">
		<s:Ellipse id="background" 
				   width="250" height="250"
				   horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:SolidColor id="backgroundSolid" color="#111111" />
			</s:fill>
		</s:Ellipse>
		<s:VGroup id="containerCurrentValues"
				  gap="0" 
				  horizontalAlign="center" verticalAlign="middle"
				  verticalCenter="0" horizontalCenter="0"
				  mouseChildren.notConfirmed="false"
				  useHandCursor.notConfirmed="true"
				  buttonMode.notConfirmed="true">
			<s:Label id="labelCurrentDegress" 
					 color="#FFffff"
					 fontFamily="Droid"
					 fontSize="52"
					 paddingLeft="20"/>
			<s:Label id="labelConfirmChanges"
					 color="#d0d0d0"
					 text="CONFIRM CHANGE"
					 fontFamily="Droid"
					 fontSize="14"
					 visible="false"
					 visible.notConfirmed="true"/>
		</s:VGroup>
		
		<s:VGroup id="containerPrevValues"
				  includeIn="notConfirmed"
				  gap="0" 
				  horizontalAlign="center" verticalAlign="middle"
				  horizontalCenter="0" verticalCenter="95"
				  mouseChildren="false"
				  useHandCursor="true"
				  buttonMode="true">
			<s:Label id="labelKeepMain" 
					 color="#C2B538"
					 fontFamily="Droid"
					 fontSize="14"
					 text="KEEP"/>
			<s:Label id="labelPrevValue"
					 color="#C2B538"
					 fontFamily="Droid"
					 fontSize="28"
					 paddingLeft="10"/>
		</s:VGroup>
	</s:Group>
	<s:Group id="highlighted"
			 horizontalCenter="0" verticalCenter="0"
			 width="200" height="200"/>
	<s:Group horizontalCenter="0" verticalCenter="0"
			 width="200" height="200">
		<s:Path id="cursorCurrentPosition" 
				x="100" y="100"
				data="M 94,-2 L 114,-2 114,4 94,4 Z"
				filters.pending="{ [ filterGlowHighlight ] }">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Path>
	</s:Group>
	<s:Group horizontalCenter="0" verticalCenter="0"
			 width="200" height="200">
		<s:Path id="cursorPendingPosition" 
				x="100" y="100"
				rotation.pending="{ rotateMovingCursor(hostComponent.currentValueDelta) }"
				data.pending="M 94,-2 L 114,-2 114,4 94,4 Z"
				filters.pending="{ [filterGlowHighlight] }">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Path>
	</s:Group>
	
	<s:Ellipse width="350" height="350"
			   horizontalCenter="0" verticalCenter="0">
		<s:fill>
			<s:LinearGradient rotation="240">
				<s:GradientEntry color="#ffffff" alpha="0.1" ratio="0" />
				<s:GradientEntry color="#ffffff" alpha="0" ratio="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Ellipse>
	
	<s:Ellipse horizontalCenter="0" verticalCenter="0"
			   width="250" height="250">
		<s:fill>
			<s:LinearGradient rotation="240">
				<s:GradientEntry color="#ffffff" alpha="0.2" ratio="0" />
				<s:GradientEntry color="#ffffff" alpha="0" ratio="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Ellipse>
</s:Skin>
