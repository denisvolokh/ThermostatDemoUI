<?xml version="1.0" encoding="utf-8"?>
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark" 
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="creationCompleteHandler(event)"
		currentState="down">
	<!-- host component -->
	<fx:Metadata>
		[HostComponent("sg.denisvolokh.gwr.GWRThermostat")]
	</fx:Metadata>
	
	<fx:Declarations>
		<s:AnimateColor id="animateBackgroundColor"
						target="{ backgroundSolid }"
						colorPropertyName="color"
						colorFrom="0x111111"
						colorTo="0x004dd8"
						duration="400"/>
		<mx:AnimateProperty id="animateLabelAlpha" 
						    repeatCount="3"
							target="{ labelSubMain }"
							property="alpha"
							fromValue=".7"
							toValue="0"
							duration="800"/>
	</fx:Declarations>
	
	<s:states>
		<s:State name="normal" enterState="enterNormalStateHandler(event)"/>
		<s:State name="down"
				 exitState="exitDownStateHandler(event)"
				 enterState="enterDownStateHandler(event)"/>
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import ColorJizz.AbstractColor;
			import ColorJizz.RGB;
			
			import mx.binding.utils.BindingUtils;
			import mx.events.FlexEvent;
			import mx.graphics.SolidColor;
			
			import sg.denisvolokh.gwr.BarTick;
			
			import spark.filters.GlowFilter;
			import spark.primitives.Path;
			
			private var needToRepositionValueLabel : Boolean = false;
			
			private var alreadyChangedPosition : Boolean = false;
			
			private var minAngle : Number = 130;
			
			private var maxAngle : Number = 410;
			
			private var _tempPending : Number = 0;
			
			private var _tempCurrent : Number = 0;
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				var start : RGB = new RGB(58,86,148)
				var range : Vector.<AbstractColor> = start.range(new RGB(156,68,46), 47, true);
				
				var j :int = 0;
				for (var i : int = minAngle; i <= maxAngle; i=i+7)
				{
					var small:BarTick = new BarTick();
					small.x = 125;
					small.y = 125;
					small.alpha = 1;
					trace(j,i,RGB(range[j]).toHex().hex)
					small.color = RGB(range[j]).toHex().hex;
					small.rotation = i;
					groupBackgroundElements.addElement(small);
					j++;
				}
				
				_tempCurrent = hostComponent.currentValue;
				labelMain.text = hostComponent.currentValue.toString();
			}
			
			private function rotateMovingCursor(delta : Number):Number
			{
				var newValue : Number = _tempCurrent + delta*7;
				
				if (newValue >= maxAngle)
				{
					_tempCurrent = maxAngle;
				}
				else if (newValue <= minAngle)
				{
					_tempCurrent = minAngle;	
				}
				else
				{
					_tempCurrent = newValue;	
				}
				
				if (delta != 0) 
				{
					this.addHighlighedTicks(hostComponent.currentValue, _tempCurrent);
					
					if (hostComponent.currentValue > _tempCurrent) 
					{
						if (this.alreadyChangedPosition == false) 
						{
							moveCurrentValueLabel(false);
							this.alreadyChangedPosition = true;
						}
					}
				}
				
				labelMain.text = _tempCurrent.toString()
				
				return _tempCurrent;
			}
			
			private function addHighlighedTicks(from : int, to : int):void
			{
				this.highlighted.removeAllElements();
				
				var _from : int = from;
				var _to : int = to;
				
				if (from >= to)
				{
					_from = to;
					_to = from;
				}
				
				for (var i : int = _from + 7; i < _to; i=i+7)
				{
					var small:BarTick = new BarTick;
					small.color = 0xFFFFFF;
					small.x = 100;
					small.y = 100;
					small.alpha = .7;
					small.rotation = i;
					this.highlighted.addElement(small);
				}
			}
			
			private function moveCurrentValueLabel(clockwise : Boolean = true):void
			{
				var _x : Number = 100 * Math.cos(hostComponent.currentValue * Math.PI / 180) + 150;
				var _y : Number = 100 * Math.sin(hostComponent.currentValue * Math.PI / 180) + 150;
				
				var _offsetX : Number = 0;
				var _offsetY : Number = 0;
				
				labelCurrentValue.move(_x + _offsetX, _y + _offsetY);
			}
			
			protected function enterDownStateHandler(event:FlexEvent):void
			{
				//animateBackgroundColor.play();
				cursorPendingPosition.rotation = hostComponent.currentValue;
				
				moveCurrentValueLabel();
			}
			
			protected function enterNormalStateHandler(event:FlexEvent):void
			{
				cursorCurrentPosition.rotation = hostComponent.currentValue;
			}
			
			protected function exitDownStateHandler(event:FlexEvent):void
			{
				if (_tempCurrent != hostComponent.currentValue)
				{
					if (animateLabelAlpha.isPlaying) {
						animateLabelAlpha.stop();
					}
					
					animateLabelAlpha.play();	
				}
				
				//animateBackgroundColor.play(null, true);
				this.highlighted.removeAllElements();
				hostComponent.currentValue = _tempCurrent;
				
				this.alreadyChangedPosition = false;
			}
			
		]]>
	</fx:Script>
	<s:Group width="350" height="350">
		<s:Ellipse width="300" height="300"
				   horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:LinearGradient rotation="60">
					<s:GradientEntry color="#f4f4f4" ratio="0" />
					<s:GradientEntry color="#000000" ratio="1" />
				</s:LinearGradient>
			</s:fill>
		</s:Ellipse>
		<s:Ellipse width="270" height="270"
				   horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:LinearGradient rotation="60">
					<s:GradientEntry color="#000000" ratio="0" />
					<s:GradientEntry color="#777777" ratio="1" />
				</s:LinearGradient>
			</s:fill>
		</s:Ellipse>
	</s:Group>
	<s:Group id="groupBackgroundElements"
			 horizontalCenter="0" verticalCenter="0"
			 width="250" height="250">
		<s:Ellipse id="background" 
				   width="250" height="250"
				   horizontalCenter="0" verticalCenter="0">
			<s:fill>
				<s:SolidColor id="backgroundSolid" color="#111111" />
			</s:fill>
		</s:Ellipse>
		<s:Label id="labelSubMain"
				 color="#d0d0d0"
				 text="LEARNING"
				 fontFamily="Droid"
				 fontSize="12"
				 alpha="0"
				 horizontalCenter="0"
				 verticalCenter="-25"/>
		<s:Label id="labelMain" 
				 color="#FFffff"
				 horizontalCenter="0"
				 verticalCenter="10"
				 fontFamily="Droid"
				 fontSize="55"/>
	</s:Group>
	<s:Group id="highlighted"
			 horizontalCenter="0" verticalCenter="0"
			 width="200" height="200"/>
	<s:Group horizontalCenter="0" verticalCenter="0"
			 width="200" height="200">
		<s:Path id="cursorCurrentPosition" 
				x="100" y="100"
				data="M 94,-2 L 114,-2 114,4 94,4 Z"
				filters.down="{ [new spark.filters.GlowFilter(0xFFFFFF, .9, 12, 12, 1, 2)] }">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Path>
	</s:Group>
	<s:Group horizontalCenter="0" verticalCenter="0"
			 width="200" height="200">
		<s:Path id="cursorPendingPosition" 
				x="100" y="100"
				rotation.down="{ rotateMovingCursor(hostComponent.currentValueDelta) }"
				data.down="M 94,-2 L 114,-2 114,4 94,4 Z"
				filters.down="{ [new spark.filters.GlowFilter(0xFFFFFF, .9, 12, 12, 1, 2)] }">
			<s:fill>
				<s:SolidColor color="#FFFFFF"/>
			</s:fill>
		</s:Path>
	</s:Group>
	<s:Label id="labelCurrentValue"
			 includeIn="down"
			 fontFamily="Droid"
			 fontSize="9"
			 color="#FFFFFF"
			 text="{ hostComponent.currentValue }"/>
	
	<s:Ellipse width="350" height="350"
			   horizontalCenter="0" verticalCenter="0">
		<s:fill>
			<s:LinearGradient rotation="240">
				<s:GradientEntry color="#ffffff" alpha="0.1" ratio="0" />
				<s:GradientEntry color="#ffffff" alpha="0" ratio="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Ellipse>
	<!--<s:Ellipse x="38" y="38" width="224" height="224">
		<s:fill>
			<s:LinearGradient rotation="60">
				<s:GradientEntry color="#ffffff" alpha="0.7" ratio="0" />
				<s:GradientEntry color="#ffffff" alpha="0" ratio="1" />
			</s:LinearGradient>
		</s:fill>
	</s:Ellipse>-->
</s:Skin>
